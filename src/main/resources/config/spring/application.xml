<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:drools="http://drools.org/schema/drools-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 

        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd http://drools.org/schema/drools-spring http://drools.org/schema/drools-spring.xsd">

    <!-- Annotation scan -->
    <context:component-scan base-package="com.dc.esb.servicegov.*.impl"/>

    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:/config/application.properties</value>
                <value>classpath*:/config/jdbc.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="defaultAutoCommit" value="false"/>
        <property name="initialSize" value="50"/>
        <property name="maxActive" value="100"/>
        <property name="minIdle" value="25"/>
        <property name="maxIdle" value="30"/>
        <property name="maxWait" value="3000"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="180"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="validationQuery" value="select count(1) from dual"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="numTestsPerEvictionRun" value="100"/>
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!-- <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop> -->
            </props>
        </property>
        <property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.dc.esb.servicegov.entity</value>
                <!--<value>org.jbpm.persistence.processinstance</value>-->
                <!--<value>org.drools.persistence.info</value>-->
                <!--<value>org.jbpm.process.audit</value>-->
                <!--<value>org.jbpm.task</value>-->
            </list>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"></tx:annotation-driven>

    <bean id="openSessionInViewMethodInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
    </bean>

    <!-- ========================================================= Shiro Components
        ========================================================= -->

    <!-- Shiro's main business-tier object for web-enabled applications (use
        org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there is
        no web environment) -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app (realm configured next, below). If you have multiple
            realms, use the 'realms' property instead. -->
        <property name="realm" ref="sampleRealm"/>
        <!-- Uncomment this next property if you want heterogenous session access
            or clusterable/d    istributable sessions. The default value is 'http' which
            uses the Servlet container's HttpSession as the underlying Session implementation.
            <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly
        in web.xml - web.xml uses the DelegatingFilterProxy to access this bean.
        This allows us to wire things with more control as well utilize nice Spring
        things such as PropertiesPlaceholderConfigurer and abstract beans or anything
        else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login/"/>
        <property name="successUrl" value="/home"/>
        <property name="unauthorizedUrl" value="/jsp/login/login.jsp"/>
        <!-- The 'filters' property is usually not necessary unless performing
            an override, which we want to do here (make authc point to a PassthruAuthenticationFilter
            instead of the default FormAuthenticationFilter: -->
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean
                            class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /login/** = anon
                /newui/** = anon
                /** = authc
            </value>
        </property>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceUnitName" value="org.jbpm.persistence.jpa"/>
    </bean>
    <bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <drools:grid-node id="node1"/>
    <drools:kstore id="kstore1"/>
    <drools:kbase id="kbase1" node="node1">
        <drools:resources>
            <drools:resource id="resource1" type="BPMN2"
                             source="classpath:MyProcess.bpmn"/>
        </drools:resources>
    </drools:kbase>

    <drools:ksession id="ksession" type="stateful" kbase="kbase1"
                     node="node1">
        <drools:configuration>
            <drools:jpa-persistence>
                <drools:transaction-manager ref="txManager"/>
                <drools:entity-manager-factory ref="entityManagerFactory"/>
            </drools:jpa-persistence>
        </drools:configuration>
    </drools:ksession>
    <!--<bean id="systemLog" class="com.dc.esb.servicegov.log.OperationLogAspect" />-->

    <aop:aspectj-autoproxy/>
</beans>
